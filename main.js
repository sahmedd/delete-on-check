/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DeleteOnCheckPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DeleteOnCheckPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Loading Delete on Check plugin");
    this.registerEvent(
      this.app.vault.on("modify", (file) => {
        if (file instanceof import_obsidian.TFile) {
          this.handleFileModify(file);
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-change", (editor, info) => {
        this.handleEditorChange(editor, info);
      })
    );
  }
  onunload() {
    console.log("Unloading Delete on Check plugin");
  }
  async handleFileModify(file) {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile || activeFile.path !== file.path)
      return;
    const fileContent = await this.app.vault.read(file);
    if (!fileContent.includes("#deleteoncheck"))
      return;
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!activeView)
      return;
    const editor = activeView.editor;
    this.processCheckedTasks(editor, fileContent);
  }
  async handleEditorChange(editor, info) {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile)
      return;
    const fileContent = editor.getValue();
    if (!fileContent.includes("#deleteoncheck"))
      return;
    setTimeout(() => {
      this.processCheckedTasks(editor, fileContent);
    }, 50);
  }
  processCheckedTasks(editor, content) {
    const lines = content.split("\n");
    const checkedTaskRegex = /^(\s*)-\s+\[x\]\s+(.*)$/i;
    for (let i = lines.length - 1; i >= 0; i--) {
      if (checkedTaskRegex.test(lines[i])) {
        console.log(`Deleting checked task on line ${i + 1}: ${lines[i]}`);
        this.deleteTaskLine(editor, i);
      }
    }
  }
  deleteTaskLine(editor, lineNumber) {
    const currentLine = editor.getLine(lineNumber);
    const checkedTaskRegex = /^(\s*)-\s+\[x\]\s+(.*)$/i;
    if (checkedTaskRegex.test(currentLine)) {
      const lineStart = { line: lineNumber, ch: 0 };
      let lineEnd = { line: lineNumber + 1, ch: 0 };
      if (lineNumber === editor.lastLine()) {
        lineEnd = { line: lineNumber, ch: currentLine.length };
        if (lineNumber > 0) {
          const prevLine = editor.getLine(lineNumber - 1);
          lineStart.line = lineNumber - 1;
          lineStart.ch = prevLine.length;
        }
      }
      editor.replaceRange("", lineStart, lineEnd);
    }
  }
};
